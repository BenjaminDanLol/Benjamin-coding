So I have team 1 and team 2, the amount of people on each team is a variable amount. Which is the first hurdle.
But what do I have access to at this point of time? 
I have access to what Pokemon each team has chosen.
I also have access to what Moves those pokemon have chosen for this turn.

So how could I order this?

First I could assume the priorities i.e. I'll check for priority 5 moves first.
So I could make a list/ArrayList that store pokemon from each team. Later in this arraylist
I'll simply access the move element of the players choice from beforehand and put it into performMove.

And Then I could look for every move that has priority 5:
Then I'll have an if statement which checks for that.
The boolean will block all pokemon who haven't used a prio 5 move.
So those inside I can simply check for speed against each other, where
the pokemon who are quickest should be ordered first. 
The algorithm would probably be something like looking for speed range, and then if there
are more than 1 pokemon in there the range will effectively get smaller, and smaller
wherein each there will be a check. To see if there is 1 pokemon yet.
I could probably put the first pokemon who has been sorted out, directly into the array list
since I'll simply check for how many pokemon are inside this sorting after a pokemon left , 
and then I'll check minus that amount with the pokemon itself.
So say there are 6 pokemon, and two are outside of this sortment. Then another method will be called
Which checks for those two pokemon as well. But to not confuse anyone I'll assume only 1 pokemon left
in this scenario. So then simply 6-1 = 5, that means the pokemon should be placed in the 5 position of
the array. Which is naturally at [4] since arrays are 0 inclusive.
If I sort like this for each priority I'll have all pokemon in the correct order.
I believe that priorities should be put into a list seperately, and then I'll have a reverse for loop. 
That's smthn like this: for (int i = maxPriorityUsedThisTurn; lowestPriorityUsedThisTurn < maxPriorityUsedThisTurn; i--) {
    ...
}
Yup so I guess there will be some loops storing the priority of each pokemon from each team. Or it could also
be action from players, that's more correct as well, since the if player chooses to swap out a pokemon, then their prio should definitely be set to some high priority. - Side note I'm certain that this is how gamefreak did it as well, would be fun to check it out be swapping pokemon against an enemy will you speed is the highest. I'm pretty sure the pokemon that's the fastest is swapped out first every time. Or they simply have a method executed where the algorithm gets lazy and doesn't sort at prio 6 (that's what I believe the prio for swapping pokemon is).


I believe this will work, but I'll just assume that it will go wrong xd.

Two things come to mind here, say a pokemon faints by another, then that pokemon should not perform a move.
That means inside perform move there should be faint check, and if that's true then, under that players turn
they'll first be checked for if they have more pokemon. If they do, then present a list of available pokemon to
player and they'll send that pokemon in at the next turn. Till then their placement will be empty.
(This should naturally also be checked for under perform move).
So performMove needs two more functionalities. 1. check for if the user fainted (What to do here is already discussed). 2. check for if the victim fainted. If their target faints, I'll do a randomSuccess method which checks if random number becomes 1 or 2. If 1, then target pokemon to the left of the pokemon i.e. -1 positioning in array, if 2, then to the right i.e. +1 positioning. Ah naturally before this coin flip I'll need to check there are any pokemon alive to the right and left. Since it would be nonsensical to hit nothing if the pokmeon could target something, also avoids null pointer exceptions.

So I should do the following:
Add a boolean that is called isFainted, this boolean is set to false by default. Likewise under the method moveDoesDirectDamage the after HPMod is set through damage i.e. Pokemon took damage, the check for is fainted is used there from internally from the Pokemon object. 

This way it's detected that the Pokemon is fainted, and from there two things happen: 1. that pokemon is removed from the list, this also means that it isn't in the loop where a move is performed, which also means dead pokemon don't do damage. Two it's possible to have an if statement inside reverse loop that checks for if any of the opposing pokemon are fainted, if so there should be executed a loop again, that checks for if it's just 1 or more, the based off that the target the player chose prior, is shifted by that many elements.
(I prob need to also check one more time for if the new target is fainted or not, if it is then my algorithm is wrong, and I'll just have a default algorithm that takes a random number with the range of the enemy teams pokemon in play. So prob enemy team length - the amount of fainted, and now .nextInt is 0 based like arrays are so that's enough.) In other words algorith goes like this for a case where enemy team has 8 pokemon in play this battle, and 3 of them are fainted. 8 - 3 = 5 -> .nextInt(5) -> the number will then always be between 0 (inclusive) and 5 (exclusive).

